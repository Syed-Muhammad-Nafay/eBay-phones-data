bs4
requests
from seleniumbase import BaseCase
from bs4 import BeautifulSoup
import time
import random


class EbayHumanStealthScraper(BaseCase):
    def test_scrape_stealthily(self):
        subject = "gucci purse"
        subject = subject.replace(" ", "+")
        conditions = ['1000', '1500', '2000%7C2010%7C2020%7C2030', '3000']

        # Optional: Headless for quiet mode
        self.headless = False  # Set to True if you want to run invisibly

        # Set a custom viewport size (simulate different devices)
        self.set_window_size(
            random.choice([1280, 1366, 1440, 1920]),
            random.choice([720, 768, 900, 1080])
        )

        for condition in conditions:
            for page in range(1, 4):  # Scrape 3 pages per condition
                url = (
                    f"https://www.ebay.com/sch/i.html?_nkw={subject}"
                    f"&_sacat=0&_from=R40&rt=nc&LH_ItemCondition={condition}&_pgn={page}"
                )

                # Open URL with delay
                self.sleep(random.uniform(3.0, 6.0))
                self.open(url)

                # Small scrolling to simulate user checking the page
                for _ in range(random.randint(2, 4)):
                    self.sleep(random.uniform(1.5, 2.5))
                    scroll_position = random.randint(200, 1200)
                    self.execute_script(f"window.scrollTo(0, {scroll_position});")

                # Final scroll to bottom
                self.sleep(random.uniform(2.0, 4.0))
                self.scroll_to_bottom()
                self.sleep(random.uniform(2.0, 4.0))

                html = self.get_page_source()
                soup = BeautifulSoup(html, "html.parser")

                # Category
                categorytag = soup.find('ul', class_='srp-refine__category__list')
                if categorytag:
                    optiontag = [x.text for x in categorytag.find_all('span')]
                    category = next((item for item in optiontag if item.startswith("Selected")), "Unknown")
                else:
                    category = "Unknown"

                print(f"\nüì¶ Category: {category} | Condition Code: {condition} | Page: {page}")

                # Product info
                divs = soup.find_all("div", class_="s-item__info")
                for div in divs:
                    titletag = div.find("span", attrs={"role": "heading"})
                    if titletag:
                        title = titletag.text.strip()
                        if "Shop on eBay" in title:
                            continue

                        conditiontag = div.find("span", class_="SECONDARY_INFO")
                        condition_text = conditiontag.text if conditiontag else "N/A"

                        pricetag = div.find("span", class_="s-item__price")
                        price = pricetag.text if pricetag else "N/A"

                        locationtag = div.find("span", class_="s-item__location s-item__itemLocation")
                        location = locationtag.text if locationtag else "N/A"

                        deliverytag = div.find("span", class_="s-item__shipping s-item__logisticsCost")
                        delivery = deliverytag.text if deliverytag else "N/A"

                        print(f"üëú {title} | üíµ {price} | üó∫Ô∏è {location} | üöö {delivery} | üßæ {condition_text}")

                # Delay between pages
                self.sleep(random.uniform(5.0, 10.0))
